/**
\mainpage A framework to build easily an UPnP control point.

<h1>Introduction</h1>

First. Huge Thanks to the fantastic QT team. It is really a great framework. It is stable, powerful and easy to use.

Secondly. English is not my natural language. Sorry for gibberish. 

QtUPnP framework is a framework to build easily an UPnP control point.
It <b>focuses</b> on the <b>UPnP/AV</b> standard. For this, a set of classes are created to handle easily media servers and media renderers.

QtUPnp is based on QT5 framework. It has been tested on systems:
\li Windows. Windows 10 32 or 64 bits from Vista (32 bits must be built with Qt5.6) and Windows 10 (32 & 64 bits).
The binaries are created from "qt-opensource-windows-x86-mingw530-5.8.0.exe" installer.

\li Linux 64 bits distrubution Kubuntu and Ubuntu.
The binaries are created from "qt-opensource-linux-x64-5.8.0.run" installer.

\li Rasbian GNU/Linux 9.4 (stretch). Kernel 4.14.30-v7+
It has been tested on Raspberry PI3 (QtUPnP, chupnp, aivctrl).
To build QtUPnP and the other executables you must apply: 
  - sudo apt-get install qt5-default
  - sudo apt-get install qtcreator
  - sudo apt-get update
  - sudo apt-get upgrade
  - sudo apt-get install qtcreator gcc qtbase5-dev
  
 \li MacOS
 QtUPnP has been built and partially tested.

<h1>Base documentation</h1>
To use QtUPnP, it is necessary to know a minimum of the UPnP protocol. For this, the site http://www.upnp.org may be use.
It offers a complete documentation of the protocol UPnP. This organization publishes a lot of pdf files.
For example:
\li http://upnp.org/resources/documents/UPnP_AV_tutorial_July2014.pdf
\li http://upnp.org/specs/av/UPnP-av-ConnectionManager-v1-Service.pdf for media server and renderer.
\li http://upnp.org/specs/av/UPnP-av-ContentDirectory-Service.pdf for media server.
\li http://upnp.org/specs/av/UPnP-av-AVTransport-v1-Service.pd for media renderer.
\li http://upnp.org/specs/av/UPnP-av-RenderingControl-v1-Service.pdf for media renderer.

Other documentations.
\li https://en.wikipedia.org/wiki/Universal_Plug_and_Play
\li https://www.dlna.org
\li 

<h1>UPnP/AV schema of a control point</h1>
To explain the working of a control point, see http://upnp.org/specs/av/UPnP-av-AVArchitecture-v1.pdf.

A very simple representation can be:
\image html upnp-av-schema.jpg

\li The control point invokes UPnP actions with "in" arguments and the device update the "out" arguments. For QtUPnP/AV
the out arguments are returned in standard C++ class containing standard Qt and C++ data type.

\li The UPnP events are also handled. E.g. the user changes the volume with a button on the device.

<h1>Start an UPnP/AV control point</h1>
To start an UPnP control point, it is necessary to:
\li Create one object. The CControlPoint, one by application.
\li Create some slots.
\li invokes UPnP actions.
\li Display actions results.

Very easy isn't it!!!!!!!!!!!!!!!!!

The framework handles all logistics related to the UPnP protocol.

The control point draft can be resumed at :
\code
class MainWindow : public QMainWindow
{
  ....
  
protected :
  virtual void closeEvent (QCloseEvent*); // Mandatory
 
protected slots :
  void discover (); // Mandatory if you use a timer to launch the discovery.
  void newDevice (QString const & uuid); // Mandatory. To browse the new device detected.
  void lostDevice (QString const & uuid); // Mandatory. To remove the lost device.
  void discoveryLaunched (char const * nt, int index, int count); // Not mandatory just to show the discovery progress.
  void eventReady (QStringList const & emitter);  // Not mandatory but useful to minimize the network traffic.
  void upnpError (int errorCode, QString const & errorString);  // Not mandatory.
  void networkError (QString const & deviceUUID, QNetworkReply::NetworkError errorCode, QString const & errorString);  // Not mandatory.

  // Example to invoke actions
  void on_play_clicked (); // Assume exist a button "play".
  void on_browse_clicked (); // Assume exist a button "browse".
  ....
  
private :
  QTimer timer;  // Not mandatory.
  QtUPnP::CControlPoint* cp; // Mandatory.
  QString rendererUUID; // The current renderer uuid.
  QString serverUUID; // The current server uuid.
  ...
}

Mainwindow::MainWindow
{
  ....

  cp = new CControlPoint (this); // Create the control point.

  connect (&timer, SIGNAL(timeout()),
           this, SLOT(discover())); // To launch discovery.

  connect (cp, SIGNAL(newDevice(QString const &)),
           this, SLOT(newDevice(QString const &))); // To browse the new detected device.

  connect (cp, SIGNAL(lostDevice(QString const &)),
           this, SLOT(lostDevice(QString const &))); // To remove the lost devices.

  connect (cp, SIGNAL(eventReady(QStringList const &)),
           this, SLOT(eventReady(QStringList const &))); // To handle the UPnP events.

  connect (cp, SIGNAL(upnpError(int, QString const &)),
           this, SLOT(upnpError(int, QString const &))); // To handle the UPnP errors.

  connect (cp, SIGNAL(networkError(QString const &, QNetworkReply::NetworkError, QString const &)),
           this, SLOT(networkError(QString const &, QNetworkReply::NetworkError, QString const &)));  // To handle the network errors.
 
  connect (cp, SIGNAL(searched(const char*,int,int)), this, SLOT(discoveryLaunched(const char*,int,int))); // To show the discovery progress.. 

  m_timer.setSingleShot (true);
  m_timer.start (250); // Launch discovery when all widgets are polished.

  ...
}

void CMainWindow::closeEvent (QCloseEvent*)
{
  m_cp->close (); // Close the control point.
}

void Mainwindow::discover ()
{
  cp->discover (); // Launch the discovery.
}

void Mainwindow::newDevice (QString const & uuid)
{
  // Add new detected device to your browser.
}

void Mainwindow::lostDevice (QString const & uuid)
{
  // Remove the lost device of your browser.
}

void Mainwindow::eventReady (QStringList const & emitter)
{
  // A device emitted UPnP events.
  // emitter[0] is the device uuid.
  // emitter[1] is the service identifier.
  // Emitter[...] the others are the names of updated variables
}

void Mainwindow::upnpError (int errorCode, QString const & errorString)
{
  // UPnP error manager.
}

void Mainwindow::networkError (QString const & deviceUUID, QNetworkReply::NetworkError errorCode, QString const & errorString)
{
  // Network error manager.
}

void Mainwindow::on_play_clicked ()
{
  CAVTransport avt (m_cp); // Create a CAVTransport to easily use AVTransport service actions.
  avt.play (rendererUUID); // Invoke the Play action for a renderer.
}

void Mainwindow::on_browse_clicked ()
{
  CRenderingControl rc (m_cp); // Create a CRenderingControl to easily use RenderingControl service actions..
  rc.browse (serverUUID, "0"); // Browse the root of the server.
}

\endcode

<h1>Actions manager</h1>
The general action manager is the member function:
\code
CActionInfo invokeAction (QString const & deviceUUID, QString const & serviceID, QString const & actionName,
                          QList<TArgValue>& args = noArgs,s int timeout = CActionManager::Timeout);
\endcode

In case of UPnP/AV, the action name is uniq for a device and the arguments are defined in terms of name, type and value.
To help the action invokecation, the following objects was created:
\li CAVTransport
\li CRenderingControl
\li CDirectoryContent
\li CConnectionManager

Also a super object CAVControl creates for you these objects.
With these objects, the arguments and the return values are standard C++ classes and types.

Others functinalities can help the QtUPnP user.
\li Sorting. Somes servers have no sort capabilities. QtUPnP provides a similar functionality. See CBrowseReply::sort. 
\li Searching. Somes servers have no search capabilities. QtUPnP provides a similar functionality for the current browse directory.
See CBrowseReply:search. 

<h1>Some remarks</h1>
\li QtUPnP is limited at the HTTP protocol.
\li All ports, exept multicast port, are dynamically selected.
\li UPnP/AV protocol defines a lot of capabilities. Most of the time, devices implement a subset of these capabilities.
\li Generally, the UPnP servers implementation seems good. It is not the case with the renderers because
renderers are sold with their IOS/Android applications. The manufacturers can be used their own APIs and they not accord equal importance
at the UPnP implementation.
\li For VirtualBox users choose 'Bridge Mode' in the network configuration. it is important to select Bridge Mode not NAT.
You can also select promiscuous at refused. Sometimes the default card type must be changed.

<h1>Test program</h1>
An example, <b>chupnp</b>, is providing with the source of the framework.
This example shows devices, services, actions and event results (see the chupnp docs folder).

<h1>Devices tested</h1>
<h2>Servers</h2>
\li Windows Media Player v12.015063.608 (Windows).
\li Foobar 2000 v1.3.15 (Windows).
\li NAS Synology (DSM 6).
\li NAS Western Digital My Cloud.
\li StriimServer Awox v1.2.0.0.
\li Cabasse Stream 1 v16.09.3.
\li La Box Numericable.
\li FreeBox Révolution.
\li MediaMonkey Windows v4.1.19 (Windows).
\li MediaTomb v0.12.2  (Linux).

<h2>Renderers</h2>
\li Cabasse Stream 1 v 16.09.
\li Renderer Android Awox  v2.3.0 (Android).
\li Foobar 2000 v1.3.15 (Windows).
\li BubbleUPnP v2.8.10 (Android).
\li Windows Media Player v12.015063.608 (Windows).
\li La Box Numericable.
\li Stream800 EVM de Streamunlimited.
\li iEast SoundStream de Sonoé.
\li Some televisions (e.g Samsung UE55F7000).

<h2>Other devices</h2>
\li Light switches
\li Socket switches

<h1>Troubleshooting</h1>
\li Windows Media Player: Sometimes WMP fails to stream files and thumbnails. Restart the computer (not shutdown) generally solves the problem.
\li VirtalBox: Before Version 5.2.4 r119785, Wireless fails. Use only Ethernet. Sometimes for this version the network access fails also.
\li Foobar 2000: In rare cases, Foobar 2000 is not detected correctly. Close it and restart to solve the problem.

*/